from pacumen.mechanics.game_state_data import GameStateData
from pacumen.rules.pacumen_rules import PacumenRules
from pacumen.rules.ghost_rules import GhostRules


class GameState:
    # Number of points lost each round.
    TIME_PENALTY = 1

    def initialize(self, layout, num_ghost_agents=1000):
        self.data.initialize(layout, num_ghost_agents)

    def get_legal_actions(self, agent_index=0):
        """
        Returns the legal actions for a provided agent. The index of the
        agent is used to determine which agent to provide actions for,
        with the understanding that the Pacumen agent is always index 0.
        """
        if self.is_win() or self.is_loss():
            return []

        if agent_index == 0:
            return PacumenRules.get_legal_actions(self)
        else:
            return GhostRules.get_legal_actions(self, agent_index)

    def generate_successor(self, agent_index, action):
        """
        Returns a successor state for the environment after the specified
        agent takes the action.
        """
        if self.is_win() or self.is_loss():
            raise Exception("Successors cannot be generated from terminal states.")

        # It's necessary to establish the game state by create an instance
        # of the current game state.
        state = GameState(self)

        # Successor states are generated by agent action. Each agent's
        # specific logic will deal with the effects of its action in
        # the environment.
        if agent_index == 0:
            state.data.eaten = [False for _ in range(state.get_num_agents())]
            PacumenRules.apply_action(state, action)
        else:
            GhostRules.apply_action(state, action, agent_index)

        # Time passes.
        if agent_index == 0:
            state.data.score_change += -GameState.TIME_PENALTY
        else:
            GhostRules.decrement_timer(state.data.agent_states[agent_index])

        # Resolve the effects of agents interacting.
        GhostRules.check_for_collision(state, agent_index)

        # Game state bookkeeping.

        state.data.set_agent_who_moved(agent_index)
        state.data.score += state.data.score_change

        return state

    def generate_pacumen_successor(self, action):
        return self.generate_successor(0, action)

    def get_pacumen_state(self):
        return self.data.agent_states[0].copy()

    def get_pacumen_position(self):
        return self.data.agent_states[0].get_position()

    def get_pacumen_direction(self):
        return self.data.agent_states[0].get_direction()

    def get_legal_pacumen_actions(self):
        return self.get_legal_actions(0)

    def get_legal_ghost_actions(self, ghost_index):
        return self.get_legal_actions(ghost_index)

    def get_ghost_states(self):
        return self.data.agent_states[1:]

    def get_ghost_state(self, agent_index):
        if agent_index == 0 or agent_index >= self.get_num_agents():
            raise Exception("Invalid index passed to the get_ghost_state call in GameState.")

        return self.data.agent_states[agent_index]

    def get_ghost_positions(self):
        return [s.get_position() for s in self.get_ghost_states()]

    def get_ghost_directions(self):
        return [s.get_direction() for s in self.get_ghost_states()]

    def get_ghost_position(self, agent_index):
        if agent_index == 0:
            raise Exception("Pacumen's index passed to get_ghost_position")

        return self.data.agent_states[agent_index].get_position()

    def get_ghost_direction(self, agent_index):
        if agent_index == 0:
            raise Exception("Pacumen's index passed to get_ghost_direction.")

        return self.data.agent_states[agent_index].get_direction()

    def get_layout(self):
        return self.data.layout

    def get_walls(self):
        return self.data.layout.walls

    def get_dots(self):
        return self.data.dots

    def get_num_dots(self):
        return self.data.dots.count()

    def get_pellets(self):
        return self.data.pellets

    def get_num_pellets(self):
        return len(self.data.pellets)

    def get_num_agents(self):
        return len(self.data.agent_states)

    def get_score(self):
        return float(self.data.score)

    def is_win(self):
        return self.data.check_for_win()

    def is_loss(self):
        return self.data.check_for_loss()

    def has_dot(self, x, y):
        return self.data.dots[x][y]

    def has_wall(self, x, y):
        return self.data.layout.walls[x][y]

    def has_pellet(self, x, y):
        position = x, y
        for value in self.data.pellets:
            if value == position:
                return True
            else:
                return False

    def deep_copy(self):
        state = GameState(self)
        state.data = self.data.deep_copy()
        return state

    def __init__(self, previous_state=None):
        if previous_state is not None:
            self.data = GameStateData(previous_state.data)
        else:
            self.data = GameStateData()

    def __str__(self):
        return str(self.data)

    def __hash__(self):
        """
        The hash mechanism is such that states are used as the keys
        to dictionaries.
        """
        return hash(self.data)

    def __eq__(self, other):
        """
        Allows two states to be compared.
        """
        return hasattr(other, 'data') and self.data == other.data


def test():
    from pacumen.mechanics import layout
    board = layout.get_layout("testing")

    init_state = GameState()
    init_state.initialize(board)

    print("\nThe Game State from the Layout:")
    print(init_state)

    print("\nThe original Layout:")
    print(init_state.get_layout())

    print("\nThe walls representation from the Layout:")
    print(init_state.get_walls())

    print("\nThe dot representation from the Layout:")
    print(init_state.get_dots())

    print("\nCount of the dots: {}".format(init_state.get_num_dots()))

    print("\nThe pellet locations: {}".format(init_state.get_pellets()))
    print("Count of the pellets: {}".format(init_state.get_num_pellets()))

    print("\nNumber of agents: {}".format(init_state.get_num_agents()))

    print("----------------")
    print("Agent States")
    print("----------------")

    print("Pacumen State")
    print(init_state.get_pacumen_state())

    print(init_state.get_pacumen_state().configuration)

    print("Pac-Man position: {}".format(init_state.get_pacumen_position()))
    print("Pac-Man direction: {}".format(init_state.get_pacumen_direction()))

    print("\nGet legal actions for Pac-Man: {}".format(init_state.get_legal_pacumen_actions()))

    print("\nGhost States (Overall)")
    print("\nGet ghost positions:\n {}".format(init_state.get_ghost_positions()))
    print("\nGet ghost directions:\n {}".format(init_state.get_ghost_directions()))

    print("\nGhost States (Details)")
    print("Ghost 1: {}".format(init_state.get_ghost_state(1)))
    print("Ghost 2: {}".format(init_state.get_ghost_state(2)))
    print("Ghost 3: {}".format(init_state.get_ghost_state(3)))
    print("Ghost 4: {}".format(init_state.get_ghost_state(4)))

    print("Ghost 1 Position: {}".format(init_state.get_ghost_position(1)))
    print("Ghost 2 Position: {}".format(init_state.get_ghost_position(2)))
    print("Ghost 3 Position: {}".format(init_state.get_ghost_position(3)))
    print("Ghost 4 Position: {}".format(init_state.get_ghost_position(4)))

    print("Ghost 1 Direction: {}".format(init_state.get_ghost_direction(1)))
    print("Ghost 2 Direction: {}".format(init_state.get_ghost_direction(2)))
    print("Ghost 3 Direction: {}".format(init_state.get_ghost_direction(3)))
    print("Ghost 4 Direction: {}".format(init_state.get_ghost_direction(4)))

    print("Ghost 1 Legal Actions: {}".format(init_state.get_legal_ghost_actions(1)))
    print("Ghost 2 Legal Actions: {}".format(init_state.get_legal_ghost_actions(2)))
    print("Ghost 3 Legal Actions: {}".format(init_state.get_legal_ghost_actions(3)))
    print("Ghost 4 Legal Actions: {}".format(init_state.get_legal_ghost_actions(4)))

    print("----------------")
    print("Hashes and Strings")
    print("----------------")

    # Print a string version of configuration.
    print(init_state.data.agent_states[0].configuration)

    # Print a hash version of configuration.
    print(hash(init_state.data.agent_states[0].configuration))

    # Print a string version of agent state.
    print(init_state.data.agent_states[0])

    # Print a hash version of agent state.
    print(hash(init_state.data.agent_states[0]))

    # Print a hash of the game state, which is really a hash
    # of the game state data.
    print(hash(init_state))
